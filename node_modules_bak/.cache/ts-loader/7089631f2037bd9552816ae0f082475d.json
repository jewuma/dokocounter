{"remainingRequest":"C:\\prog\\doko3\\node_modules\\babel-loader\\lib\\index.js!C:\\prog\\doko3\\node_modules\\ts-loader\\index.js??ref--15-2!C:\\prog\\doko3\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\prog\\doko3\\src\\backend.ts","dependencies":[{"path":"C:\\prog\\doko3\\src\\backend.ts","mtime":1671273859116},{"path":"C:\\prog\\doko3\\babel.config.js","mtime":1639842632362},{"path":"C:\\prog\\doko3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639842481421},{"path":"C:\\prog\\doko3\\node_modules\\babel-loader\\lib\\index.js","mtime":1639842509641},{"path":"C:\\prog\\doko3\\node_modules\\ts-loader\\index.js","mtime":1639842516501},{"path":"C:\\prog\\doko3\\node_modules\\eslint-loader\\index.js","mtime":1639842489139}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\prog\\doko3\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\prog\\doko3\\src\\backend.ts"],"names":[],"mappings":"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","sourcesContent":["export interface player {\n  id: number;\n  name: string;\n  surname: string;\n  active: boolean;\n  sort: number;\n}\nexport interface playerState {\n  playerId: number;\n  name: string;\n  score: number;\n  party: kontraRe;\n  lastScore: string;\n  sort: number\n}\nexport interface gameState {\n  playerId: number,\n  points: number,\n  party: kontraRe\n}\n\nexport interface statistic {\n  gamesplayed: number,\n  gamesre: number,\n  gameskontra: number,\n  gameswon: number,\n  gamessolo: number,\n  solowon: number,\n  totalpoints: number\n  averagepoints: number\n}\nexport interface game {\n  gameId: number,\n  players: gameState[]\n}\nexport interface saveGame {\n  playerStates: playerState[],\n  kontraAnsage: number\n  reAnsage: number\n  result: number\n  extrapoints: number\n  changeLastGame: boolean\n\n}\nexport enum kontraRe {\n  Re,\n  Kontra,\n}\nconst HOST = process.env.VUE_APP_BACKEND as string\nexport class backend {\n  public async newPlayer(player: player): Promise<player> {\n    const res = await fetch(`${HOST}players.php`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(player),\n    });\n    const data = await res.json();\n    return data;\n  }\n  async deletePlayer(id: number): Promise<boolean> {\n    const res = await fetch(`${HOST}players.php/${id}`, {\n      method: \"DELETE\",\n    });\n    return res.status === 200;\n  }\n  async setPLayerActive(id: number, active: boolean): Promise<player> {\n    const playerToToggle = await this.fetchPlayer(id);\n    playerToToggle.active = active;\n    const res = await fetch(`${HOST}players.php/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(playerToToggle),\n    });\n    return await res.json();\n  }\n  async fetchPlayers(): Promise<player[]> {\n    const res = await fetch(`${HOST}players.php`);\n    const data = await res.json();\n    return data;\n  }\n  async fetchActivePlayers(): Promise<player[]> {\n    const res = await fetch(`${HOST}players.php/activeOnly`);\n    const data = await res.json();\n    return data;\n  }\n  async fetchPlayer(id: number): Promise<player> {\n    const res = await fetch(`${HOST}players.php/${id}`);\n    const data = await res.json();\n    return data;\n  }\n  async fetchStatistics(): Promise<statistic[]> {\n    const res = await fetch(`${HOST}statistics.php`);\n    const data = await res.json();\n    return data;\n  }\n  async fetchActiveList(): Promise<game[]> {\n    const res = await fetch(`${HOST}games.php`);\n    const data = await res.json();\n    return data;\n  }\n  async swapPlayers(playerId1: number, playerId2: number): Promise<boolean> {\n    const res = await fetch(`${HOST}players.php/swapSorts;` + playerId1 + \";\" + playerId2);\n    if (res.status == 200) return true;\n    else return false;\n  }\n  async saveGame(gameObject: saveGame): Promise<game[]> {\n    const body = JSON.stringify(gameObject);\n    const res = await fetch(`${HOST}games.php`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body\n    });\n    const newStates = await res.json();\n    return newStates;\n  }\n  async startNewList(): Promise<void> {\n    await fetch(`${HOST}games.php/startgame`);\n    //const data = await res.json();\n    return;\n  }\n}"],"sourceRoot":""}]}