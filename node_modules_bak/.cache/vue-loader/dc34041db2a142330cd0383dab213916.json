{"remainingRequest":"C:\\prog\\doko3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\prog\\doko3\\src\\components\\DokoPlayers.vue?vue&type=style&index=0&id=f0d84ffa&scoped=true&lang=css","dependencies":[{"path":"C:\\prog\\doko3\\src\\components\\DokoPlayers.vue","mtime":1664115131807},{"path":"C:\\prog\\doko3\\node_modules\\css-loader\\dist\\cjs.js","mtime":1639842496418},{"path":"C:\\prog\\doko3\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1639842528181},{"path":"C:\\prog\\doko3\\node_modules\\postcss-loader\\src\\index.js","mtime":1639842509553},{"path":"C:\\prog\\doko3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639842481421},{"path":"C:\\prog\\doko3\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1639842514737}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zYXZlIHsKICBjdXJzb3I6IG5vdC1hbGxvd2VkOwogIG9wYWNpdHk6IDQwJTsKfQoKLmFjdGl2ZSB7CiAgb3BhY2l0eTogMTAwJTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0K"},{"version":3,"sources":["C:\\prog\\doko3\\src\\components\\DokoPlayers.vue"],"names":[],"mappings":";AAyFA,CAAC,CAAC,CAAC,CAAC,EAAE;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACd;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB","file":"C:/prog/doko3/src/components/DokoPlayers.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n    <Header text=\"Neue Liste\" />\n    <Button @btn-click=\"toggleAddPlayer\" :text=\"showAddPlayer ? 'Abbruch' : 'Neuer Spieler'\"\n      :color=\"showAddPlayer ? 'red' : 'green'\" />\n    <Button v-if=\"!showAddPlayer\" text=\"zurück\" color=\"blue\" @click=\"$emit('back')\" />\n    <Button v-if=\"!showAddPlayer\" text=\"Neue Liste starten\" color=\"purple\" @click=\"$emit('new-list')\"\n      :class=\"[startOK ? 'active' : '', 'save']\" />\n    <AddPlayer v-show=\"showAddPlayer\" @add-player=\"newPlayer\" />\n\n    <div :key=\"player.id\" v-for=\"player in players\">\n      <Player @toggle-active=\"toggleActive(player.id)\" @delete-player=\"deletePlayer(player.id)\" :player=\"player\" />\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport Player from \"./Player.vue\";\nimport Header from \"./Header.vue\";\nimport Button from \"./Button.vue\";\nimport AddPlayer from \"./AddPlayer.vue\";\nimport { backend, player } from \"../backend\";\nconst back = new backend();\nexport default defineComponent({\n  name: \"DokoPlayers\",\n  components: {\n    Player,\n    Header,\n    Button,\n    AddPlayer,\n  },\n  data() {\n    return {\n      showAddPlayer: false,\n      startOK: false,\n      players: [] as player[],\n    };\n  },\n  methods: {\n    toggleAddPlayer(): void {\n      this.showAddPlayer = !this.showAddPlayer;\n    },\n    async newPlayer(player: player) {\n      let data: player = await back.newPlayer(player);\n      this.players = [...this.players, data];\n    },\n    async deletePlayer(id: number) {\n      if (confirm(\"Spieler löschen?\")) {\n        const deleted = await back.deletePlayer(id);\n        deleted\n          ? (this.players = this.players.filter((player) => player.id !== id))\n          : alert(\"Error deleting player\");\n      }\n    },\n    async toggleActive(id: number) {\n      const playerToToggle = this.players.find((player) => {\n        return player.id === id;\n      });\n      const active = !playerToToggle?.active;\n      const data = await back.setPLayerActive(id, active);\n      this.players = this.players.map((player) =>\n        player.id === id ? { ...player, active: data.active } : player\n      );\n      this.checkStartable();\n    },\n    checkStartable() {\n      let activePlayers = 0;\n      this.players.forEach(player => {\n        if (player.active) { activePlayers++ }\n      });\n      if (activePlayers === 4) this.startOK = true;\n      else this.startOK = false;\n\n    },\n    async fetchPlayers() {\n      return await back.fetchPlayers();\n    },\n    async fetchPlayer(id: number) {\n      return back.fetchPlayer(id);\n    },\n  },\n  async created() {\n    this.players = await this.fetchPlayers();\n    this.checkStartable();\n  },\n  emits: [\"back\", \"new-list\"],\n});\n</script>\n<style scoped>\n.save {\n  cursor: not-allowed;\n  opacity: 40%;\n}\n\n.active {\n  opacity: 100%;\n  cursor: pointer;\n}\n</style>"]}]}